{"version":3,"sources":["utils/erc20.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","isTokenOnly","TranslateString","useI18n","liquidityUrlPathParts","pancakeLink","link","includes","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","tokenSymbol","depositFee","alignItems","mb","flexDirection","variant","src","alt","width","height","DepositModal","max","onConfirm","onDismiss","tokenName","depositFeeBP","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","value","handleSelectMax","title","TokenInput","onSelectMax","onChange","symbol","ModalActions","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","displayBalance","toLocaleString","useModal","onPresentDeposit","onPresentWithdraw","style","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","canCompound","rawEarningsBalance","scale","marginBottom","borderRadius","toString","marginTop","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","lpAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","onApprove","useApprove","handleApprove","console","error","textTransform","fontSize","pr","mt","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","times","BigNumber","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","size","ml","RainbowLight","keyframes","StyledCardAccent","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","FarmFinishedSash","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","display","CardActionsContainer","FarmTabButtons","useRouteMatch","url","isExact","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceBlzdBusd","usePriceBnbBusd","useWallet","tokenMode","dispatch","useDispatch","fastRefresh","useRefresh","useEffect","fetchFarmUserDataAsync","activeFarms","filter","inactiveFarms","farmsList","farmsToDisplay","map","cakeRewardPerYear","blzdPerBlock","poolWeight","pow","BLOCKS_PER_YEAR","comparedTo","Page","textAlign","exact"],"mappings":"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","file":"static/js/11.6fa5b481.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@blzd-dev/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'BNB' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@blzd-dev/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n  isTokenOnly?: boolean\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  isTokenOnly,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const pancakeLink = isTokenOnly\n    ? `https://exchange.pancakeswap.finance/#/swap?outputCurrency=${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n    : `https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`\n  const link = lpLabel.includes('vBSWAP') ? 'https://bsc.valuedefi.io/#/vswap' : pancakeLink\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={link}>{lpLabel}</StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@blzd-dev/uikit'\nimport { NoFeeTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, farmImage, tokenSymbol, depositFee }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@blzd-dev/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0 }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@blzd-dev/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@blzd-dev/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP }) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button style={{ width: 107.72 }} onClick={onPresentDeposit}>\n        {TranslateString(999, 'Stake')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton style={{ width: 52 }} variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton style={{ width: 52 }} variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@blzd-dev/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  > button {\n    width: 100%;\n  }\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const canCompound = pid === 0\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {canCompound ? (\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            scale=\"sm\"\n            variant=\"secondary\"\n            marginBottom=\"8px\"\n            style={{ borderRadius: 12 }}\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n        ) : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          scale={canCompound ? 'sm' : 'md'}\n          style={{\n            borderRadius: !canCompound ? 16 : 12,\n            marginTop: !canCompound ? 8 : 0,\n            marginBottom: !canCompound ? 8 : 0,\n          }}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@blzd-dev/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress)\n    }\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n      />\n    ) : (\n      <Button style={{ width: '100%' }} mt=\"8px\" disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          STONE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@blzd-dev/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'STONE per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@blzd-dev/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@blzd-dev/uikit'\n// import { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 32px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly\n    ? farm.tokenSymbol.toLowerCase()\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'STONE'\n  const farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, isTokenOnly } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'STONE' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {removed && <FarmFinishedSash />}\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\" style={{ marginBottom: 12 }}>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>\n          {farm.depositFeeBP / 100}%\n        </Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n          isTokenOnly={isTokenOnly}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nconst FarmFinishedSash = styled.div`\n  background-image: url('/images/pool-finished-sash.svg');\n  background-position: top right;\n  background-repeat: not-repeat;\n  height: 135px;\n  position: absolute;\n  right: -24px;\n  top: -24px;\n  width: 135px;\n`\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem } from '@blzd-dev/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = () => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={!isExact ? 1 : 0} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(999, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(999, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Heading } from '@blzd-dev/uikit'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceBlzdBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceBlzdBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { tokenMode } = farmsProps\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.blzdPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice)\n        }\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {tokenMode\n          ? TranslateString(10002, 'Stake single tokens to earn Stone')\n          : TranslateString(320, 'Liquidity Provide to earn Stone')}\n      </Heading>\n\t  <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(10000, 'Deposit Fee will be used to buyback EGG')}\n      </Heading>\n      <FarmTabButtons />\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}