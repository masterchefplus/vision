{"version":3,"sources":["hooks/useTokenBalance.ts","config/index.ts","hooks/useBlock.ts","utils/getTimePeriods.ts","views/Nft/components/HowItWorks.tsx","views/Nft/components/InfoRow.tsx","views/Nft/components/Image.tsx","views/Nft/utils/contracts.ts","views/Nft/contexts/NftProvider.tsx","views/Nft/components/ClaimNftModal.tsx","views/Nft/components/BurnNftModal.tsx","views/Nft/components/TransferNftModal.tsx","views/Nft/components/NftCard/index.tsx","views/Nft/components/NftGrid.tsx","views/Nft/components/NftList.tsx","utils/formatTimePeriod.ts","views/Nft/components/NftProgress.tsx","views/Nft/components/NftProgressSimple.tsx","views/Nft/components/SecondaryCard.tsx","views/Nft/components/CardContent.tsx","views/Nft/components/NoNftsToClaimCard.tsx","views/Nft/components/YouWonCard.tsx","views/Nft/components/NftInWalletCard.tsx","views/Nft/components/StatusCard.tsx","views/Nft/components/NftInfo.tsx","views/Nft/index.tsx"],"names":["useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","BSC_BLOCK_TIME","useBlock","useContext","BlockContext","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","timeLeft","years","months","days","hours","minutes","Math","floor","StyledHowItWorks","styled","div","theme","colors","textSubtle","Section","Icon","Text","UIKitText","Row","HowItWorks","TranslateString","useI18n","Container","id","color","size","mb","InfoRow","borderColor","StyledImage","img","Image","src","alt","originalLink","previewImage","href","target","rel","getPancakeRabbitContract","contractOptions","pancakeRabbitsAbi","pancakeRabbits","PANCAKE_RABBITS_ADDRESS","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","isInitialized","canClaim","hasClaimed","countBunniesBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","bunnyMap","state","setState","currentBlock","multicall","rabbitmintingfarm","address","RABBIT_MINTING_FARM_ADDRESS","name","startBlockNumberArr","endBlockNumberArr","countBunniesBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","prevState","toNumber","console","error","fetchContractData","pancakeRabbitsContract","params","canClaimArr","hasClaimedArr","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","bunnyId","parseInt","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","ModalContent","Actions","ClaimNftModal","nft","onSuccess","onDismiss","isLoading","setIsLoading","setError","rabbitMintingContract","useRabbitMintingFarm","cakeBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","send","from","on","title","fullWidth","variant","onClick","disabled","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","isOpen","bunnyCount","bunnyBurnCount","walletCanClaim","originalImage","description","isSupplyAvailable","walletOwnsNft","length","ChevronUpIcon","ChevronDownIcon","fetchDetails","useCallback","isDataFetched","handleClick","handleSuccess","useModal","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","isActive","outline","mt","p","endIcon","width","as","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","orderBy","nfts","map","formatTimePeriod","periods","excludePeriods","textArr","Object","keys","forEach","period","includes","substr","join","TimeLeft","Heading","Link","UIKitLink","Message","ProgressWrap","NftProgress","secondsRemaining","progress","primaryStep","NftProgressSimple","SecondaryCard","textDisabled","Content","StyledCardContent","CardContent","imgSrc","NoNftsToClaimCard","YouWonCard","NftInWalletCard","StatusCard","UnlockButton","StyledNtfInfo","NftInfo","StyledHero","Nft","Page"],"mappings":"4SA6BaA,EAAiB,WAAO,IAC3BC,EAAgBC,cAAhBD,YAD0B,EAEIE,qBAFJ,mBAE3BC,EAF2B,KAEdC,EAFc,KAclC,OAVAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,6DACQC,EAAeC,YAAYC,EAASC,eAD5C,SAEuBH,EAAaI,QAAQR,cAAcS,OAF1D,OAEQC,EAFR,OAGET,EAAe,IAAIU,IAAUD,IAH/B,4CADc,uBAAC,WAAD,wBAOdE,KACC,CAACf,IAEGG,GAGIa,EAAmB,SAACC,GAA0B,IAAD,EAC1Bf,mBAAS,IAAIY,IAAU,IADG,mBACjDI,EADiD,KACxCC,EADwC,KAEhDnB,EAAgBC,cAAhBD,YAYR,OAVAK,qBAAU,YACU,uCAAG,8BAAAC,EAAA,6DACbC,EAAeC,YAAYC,EAASC,eADvB,SAEDH,EAAaI,QAAQS,UAAU,8CAA8CR,OAF5E,OAEbS,EAFa,OAGnBF,EAAW,IAAIL,IAAUO,IAHN,2CAAH,qDAMlBC,KACC,CAACL,EAAcjB,IAEXkB,GAGMK,IArDS,SAACN,GAA0B,IAAD,EAClBf,mBAAS,IAAIY,IAAU,IADL,mBACzCI,EADyC,KAChCC,EADgC,OAEuBK,cAA/DC,EAFwC,EAExCA,QAASC,EAF+B,EAE/BA,SACTC,EAAgB1B,cAAhB0B,YAaR,OAXAtB,qBAAU,WAMJoB,GAAWC,GALG,uCAAG,4BAAApB,EAAA,sEACDsB,YAAgBF,EAAUT,EAAcQ,GADvC,OACbI,EADa,OAEnBV,EAAW,IAAIL,IAAUe,IAFN,2CAAH,oDAMhBP,KAED,CAACG,EAASC,EAAUT,EAAcU,IAE9BT,I,iCC1BT,iFAEAJ,IAAUgB,OAAO,CACfC,eAAgB,IAChBC,eAAgB,KAGY,IAAIlB,IAAU,GAArC,IACMmB,EAAkB,IAAInB,IAAU,SAChCoB,EAAiB,G,iCCT9B,oBAQeC,IALE,WAEf,OADsBC,qBAAWC,O,iCCJnC,IACMC,EAAkB,KAClBC,EAAiB,MACjBC,EAAmB,QACnBC,EAAkB,SAgDTC,IAzCQ,SAACC,GACtB,IAAIC,EAAQD,EACNE,EAAW,CACfC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTP,QAAS,GA8BX,OA3BIC,GAASH,IACXI,EAASC,MAAQK,KAAKC,MAAMR,EAAQH,GACpCG,GAASC,EAASC,MAAQL,GAGxBG,GAASJ,IACXK,EAASE,OAASI,KAAKC,MAAMR,EAAQJ,GACrCI,GAASC,EAASE,OAASP,GAGzBI,GAASL,IACXM,EAASG,KAAOG,KAAKC,MAAMR,EAAQL,GACnCK,GAASC,EAASG,KAAOT,GAGvBK,GAASN,IACXO,EAASI,MAAQE,KAAKC,MAAMR,EAAQN,GACpCM,GAASC,EAASI,MAAQX,GAGxBM,GA1CoB,KA2CtBC,EAASK,QAAUC,KAAKC,MAAMR,EA3CR,IA4CtBA,GA5CsB,GA4CbC,EAASK,SAGpBL,EAASF,QAAUC,EAEZC,I,ipBC1CT,IAAMQ,EAAmBC,IAAOC,IAAV,KACI,qBAAGC,MAAkBC,OAAOC,cAIhDC,EAAUL,IAAOC,IAAV,KAIPK,EAAON,IAAOC,IAAV,KAIJM,EAAOP,YAAOQ,IAAPR,CAAH,KAKJS,EAAMT,IAAOC,IAAV,KAyEMS,EAnEI,WACjB,IAAMC,EAAkBC,cAExB,OACE,cAACC,EAAA,EAAD,UACE,eAACd,EAAD,WACE,eAACM,EAAD,WACE,cAAC,IAAD,CAASS,GAAG,eAAeC,MAAM,YAAYC,KAAK,KAAKC,GAAG,OAA1D,SACGN,EAAgB,IAAK,kBAExB,eAACF,EAAD,WACE,cAAC,EAAD,UACE,cAAC,IAAD,MAEF,cAACF,EAAD,UACGI,EACC,IACA,2FAIN,eAACF,EAAD,WACE,cAAC,EAAD,UACE,cAAC,IAAD,MAEF,cAACF,EAAD,UACGI,EAAgB,IAAK,6FAG1B,eAACF,EAAD,WACE,cAAC,EAAD,UACE,cAAC,IAAD,MAEF,cAACF,EAAD,UACGI,EACC,IACA,qMAKR,eAACN,EAAD,WACE,cAAC,IAAD,CAASU,MAAM,YAAYC,KAAK,KAAKC,GAAG,OAAxC,SACGN,EAAgB,IAAK,+BAExB,eAACF,EAAD,WACE,cAAC,EAAD,UACE,cAAC,IAAD,MAEF,cAACF,EAAD,UAAOI,EAAgB,IAAK,4D,sNC9ExC,IAMeO,EANClB,IAAOC,IAAV,K,qaCOb,IAAMY,EAAYb,IAAOC,IAAV,KACO,qBAAGC,MAAkBC,OAAOgB,eAO5CC,EAAcpB,IAAOqB,IAAV,KA2BFC,EAhBqB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,aACzCC,EAAe,cAACN,EAAD,CAAaG,IAAKA,EAAKC,IAAKA,IAEjD,OACE,cAAC,EAAD,UACGC,EACC,mBAAGE,KAAMF,EAAcG,OAAO,SAASC,IAAI,sBAA3C,SACGH,IAGHA,K,mECxBKI,EAA2B,SAACC,GACvC,IAAMC,EAAqBC,EAC3B,OAAO/E,YAAY8E,EAAmBE,IAAyBH,ICoBpDI,EAAqBC,wBAA8B,MAmKjDC,EAjKiC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3CC,EAAYC,kBAAO,GADuC,EAEtC5F,mBAAgB,CACxC6F,eAAe,EACfC,UAAU,EACVC,YAAY,EACZC,kBAAmB,EACnBC,iBAAkB,EAClBC,eAAgB,EAChBC,uBAAwB,EACxBC,yBAA0B,EAC1BlF,UAAW,EACXmF,SAAU,KAZoD,mBAEzDC,EAFyD,KAElDC,EAFkD,KAcxDhF,EAAYD,cAAZC,QACFiF,EAAevE,cAEb4D,EAAkBS,EAAlBT,cAGR1F,qBAAU,YACe,uCAAG,4DAAAC,EAAA,+EAQZqG,YAAUC,EAAmB,CACrC,CAAEC,QAASC,IAA6BC,KAAM,oBAC9C,CAAEF,QAASC,IAA6BC,KAAM,kBAC9C,CAAEF,QAASC,IAA6BC,KAAM,qBAC9C,CAAEF,QAASC,IAA6BC,KAAM,0BAC9C,CAAEF,QAASC,IAA6BC,KAAM,8BAb1B,mCAGpBC,EAHoB,KAIpBC,EAJoB,KAKpBC,EALoB,KAMpBC,EANoB,KAOpBC,EAPoB,mBAiBkBJ,EAjBlB,GAiBfb,EAjBe,mBAkBgBc,EAlBhB,GAkBfb,EAlBe,mBAmBmBc,EAnBnB,GAmBfhB,EAnBe,mBAoBwBiB,EApBxB,GAoBfd,EApBe,mBAqB0Be,EArB1B,GAqBfd,EArBe,KAuBtBG,GAAS,SAACY,GAAD,mBAAC,eACLA,GADI,IAEPtB,eAAe,EACfG,kBAAmBA,EAAkBoB,WACrCnB,iBAAkBA,EAAiBmB,WACnClB,eAAgBA,EAAekB,WAC/BhB,yBAA0BA,EAAyBgB,WACnDjB,uBAAwBA,EAAuBiB,gBA9B3B,kDAiCtBC,QAAQC,MAAM,mBAAd,MAjCsB,0DAAH,qDAqCvBC,KACC,CAAC1B,EAAeU,IAGnBpG,qBAAU,WAiEJoB,GAhEmB,uCAAG,wDAAAnB,EAAA,sEAEhBoH,EAAyBtC,IAFT,SAGqBuB,YAAUC,EAAmB,CACtE,CAAEC,QAASC,IAA6BC,KAAM,WAAYY,OAAQ,CAAClG,IACnE,CAAEoF,QAASC,IAA6BC,KAAM,aAAcY,OAAQ,CAAClG,MALjD,0CAGfmG,EAHe,KAGFC,EAHE,eAOEH,EAAuB/G,QAAQS,UAAUK,GAASb,OAPpD,WAOhBQ,EAPgB,qBAQQwG,EARR,GAQf5B,EARe,mBASU6B,EATV,GASf5B,EATe,KAWlBM,EAAqB,KAIrBnF,EAAY,GAfM,iBA6BpB,IAbM0G,EAhBc,+BAAAxH,EAAA,MAgBS,WAAOyH,GAAP,iBAAAzH,EAAA,+EAEHoH,EAAuB/G,QAAQqH,oBAAoBvG,EAASsG,GAAOnH,OAFhE,cAEnBqH,EAFmB,gBAGHP,EAAuB/G,QAAQuH,WAAWD,GAASrH,OAHhD,cAGnBuH,EAHmB,yBAKlB,CAACC,SAASD,EAAS,IAAKC,SAASH,EAAS,MALxB,2DAOlB,MAPkB,0DAhBT,sDA2BdI,EAAkB,GAEfC,EAAI,EAAGA,EAAIlH,EAAWkH,IAC7BD,EAAgBE,KAAKT,EAAqBQ,IA9BxB,iBAiCgBE,QAAQC,IAAIJ,GAjC5B,QAiCdK,EAjCc,OAqCpBnC,EAAWmC,EAAsBC,QAAO,SAACC,EAAOC,GAC9C,IAAKA,EACH,OAAOD,EAFqD,kBAKnCC,EALmC,GAKvDV,EALuD,KAK9CF,EAL8C,KAO9D,OAAO,2BACFW,GADL,kBAEGT,EAAUS,EAAMT,GAAN,sBAAqBS,EAAMT,IAA3B,CAAqCF,IAAW,CAACA,OAE7D,IAhDiB,QAmDtBxB,GAAS,SAACY,GAAD,mBAAC,eACLA,GADI,IAEPtB,eAAe,EACfC,WACAC,aACA7E,YACAmF,gBAzDoB,kDA4DtBgB,QAAQC,MAAM,mBAAd,MA5DsB,0DAAH,oDAiErBC,KAED,CAAC1B,EAAetE,EAASgF,IAE5BpG,qBAAU,WACR,OAAO,WACLwF,EAAUiD,SAAU,KAErB,CAACjD,IAEJ,IAAMkD,EAAarC,GAAgBF,EAAMJ,eAgBzC,OACE,cAACX,EAAmBuD,SAApB,CAA6BC,MAAK,2BAAOzC,GAAP,IAAcuC,aAAYG,YAhB1C,SAACf,GAAD,OAAqB3B,EAAMD,SAAS4B,IAgBmBgB,aAVtD,WAIftD,EAAUiD,SACZrC,GAAS,SAACY,GAAD,mBAAC,eAAoBA,GAArB,IAAgCtB,eAAe,UAK1D,SACGH,K,qXC/KP,IAAMwD,GAAQ9F,YAAOO,IAAPP,CAAH,MAIL+F,GAAe/F,IAAOC,IAAV,KAIZ+F,GAAUhG,IAAOC,IAAV,KAoEEgG,GA9DqC,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EACnDxJ,oBAAS,GAD0C,mBAC9EyJ,EAD8E,KACnEC,EADmE,OAE3D1J,mBAAS,MAFkD,mBAE9EsH,EAF8E,KAEvEqC,EAFuE,KAG/E5F,EAAkBC,cAChBzC,EAAYD,cAAZC,QACFqI,EAAwBC,YAAqBjD,KAC7CkD,EAAczI,YAAgBb,eAC9BuJ,EAAeC,YAAiBF,GAEhCG,EAAa,uCAAG,sBAAA7J,EAAA,+EAEZwJ,EAAsBnJ,QACzByJ,QAAQZ,EAAIrB,SACZkC,KAAK,CAAEC,KAAM7I,IACb8I,GAAG,WAAW,WACbX,GAAa,MAEdW,GAAG,WAAW,WACbb,IACAD,OAEDc,GAAG,SAAS,WACXhD,QAAQC,MAAMA,GACdqC,EAAS,uBACTD,GAAa,MAfC,sDAkBlBrC,QAAQC,MAAM,sBAAd,MAlBkB,wDAAH,qDA4BnB,OANAnH,qBAAU,WACa,IAAjB4J,GACFJ,EAAS,iEAEV,CAACI,EAAcJ,IAGhB,eAAC,IAAD,CAAOW,MAAOvG,EAAgB,IAAK,aAAcyF,UAAWA,EAA5D,UACE,eAACL,GAAD,WACG7B,GACC,cAAC,IAAD,CAAMnD,MAAM,UAAUE,GAAG,MAAzB,SACGiD,IAGL,eAAC,EAAD,WACE,eAAC,IAAD,WAAOvD,EAAgB,IAAK,oBAA5B,OACA,cAACmF,GAAD,wBAAeI,EAAIzC,KAAnB,iBAGJ,eAACuC,GAAD,WACE,cAAC,IAAD,CAAQmB,WAAS,EAACC,QAAQ,YAAYC,QAASjB,EAA/C,SACGzF,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAQwG,WAAS,EAACE,QAASR,EAAeS,UAAWnJ,GAAWkI,GAAaM,GAAgB,EAA7F,SACGhG,EAAgB,IAAK,oB,sVCvEhC,IAAMmF,GAAQ9F,YAAOO,IAAPP,CAAH,MAIL+F,GAAe/F,IAAOC,IAAV,MAIZ+F,GAAUhG,IAAOC,IAAV,MA+EEsH,GAzEmC,SAAC,GAA6C,IAA3CrB,EAA0C,EAA1CA,IAAKsB,EAAqC,EAArCA,SAAUrB,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EAC3DxJ,oBAAS,GADkD,mBACtFyJ,EADsF,KAC3EC,EAD2E,OAEnE1J,mBAAS,MAF0D,mBAEtFsH,EAFsF,KAE/EqC,EAF+E,OAG7D3J,oBAAS,GAHoD,mBAGtF6K,EAHsF,KAG5EC,EAH4E,KAIvF/G,EAAkBC,cAChBzC,EAAYD,cAAZC,QACFqI,EAAwBC,YAAqBjD,KAE7CqD,EAAa,uCAAG,8BAAA7J,EAAA,oFAEAwK,EAFA,GAEX7C,EAFW,cAIZ6B,EAAsBnJ,QACzBsK,QAAQhD,GACRoC,KAAK,CAAEC,KAAM7I,IACb8I,GAAG,WAAW,WACbX,GAAa,MAEdW,GAAG,WAAW,WACbb,IACAD,OAEDc,GAAG,SAAS,WACXhD,QAAQC,MAAMA,GACdqC,EAAS,sBACTD,GAAa,MAjBC,sDAoBlBrC,QAAQC,MAAM,sBAAd,MApBkB,wDAAH,qDAwBnB,OACE,eAAC,IAAD,CAAOgD,MAAOvG,EAAgB,IAAK,gBAAiByF,UAAWA,EAA/D,UACE,eAAC,GAAD,WACGlC,GACC,cAAC,IAAD,CAAMnD,MAAM,UAAUE,GAAG,MAAzB,SACGiD,IAGL,eAAC,EAAD,WACE,eAAC,IAAD,WAAOvD,EAAgB,IAAK,YAA5B,OACA,cAAC,GAAD,wBAAeuF,EAAIzC,KAAnB,cAEF,eAAC,EAAD,WACE,eAAC,IAAD,WAAO9C,EAAgB,IAAK,oBAA5B,OACA,cAAC,GAAD,4BAGJ,eAAC,GAAD,WACE,cAAC,IAAD,CAAMI,MAAM,UAAZ,SACGJ,EAAgB,IAAK,qFAExB,cAAC,IAAD,CAAMI,MAAM,UAAZ,SAAuBJ,EAAgB,IAAK,uDAE9C,eAAC,GAAD,CAAciH,MAAO,CAAEC,WAAY,SAAUC,QAAS,eAAtD,UACE,cAAC,IAAD,CAAUC,QAASN,EAAUO,MAAM,KAAKC,SAAU,kBAAMP,GAAaD,MACrE,cAAC,IAAD,CAAMS,GAAG,MAAMb,QAAS,kBAAMK,GAAaD,IAAWG,MAAO,CAAEO,OAAQ,WAAvE,SACGxH,EAAgB,IAAK,qBAG1B,eAAC,GAAD,WACE,cAAC,IAAD,CAAQwG,WAAS,EAACC,QAAQ,YAAYC,QAASjB,EAA/C,SACGzF,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAQwG,WAAS,EAACE,QAASR,EAAeS,UAAWnJ,GAAWkI,IAAcoB,EAA9E,SACG9G,EAAgB,IAAK,oB,kgBC/EhC,IAAMmF,GAAQ9F,YAAOO,IAAPP,CAAH,MAIL+F,GAAe/F,IAAOC,IAAV,MAIZ+F,GAAUhG,IAAOC,IAAV,MAMPmI,GAAQpI,IAAOqI,MAAV,MACA,qBAAGnI,MAAkBC,OAAOmI,QAmFxBC,GA7E2C,SAAC,GAA6C,IAA3CrC,EAA0C,EAA1CA,IAAKsB,EAAqC,EAArCA,SAAUrB,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EACnExJ,oBAAS,GAD0D,mBAC9FyJ,EAD8F,KACnFC,EADmF,OAE3E1J,mBAAS,IAFkE,mBAE9F+I,EAF8F,KAEvF6C,EAFuF,OAG3E5L,mBAAS,MAHkE,mBAG9FsH,EAH8F,KAGvFqC,EAHuF,KAI/F5F,EAAkBC,cAChBzC,EAAYD,cAAZC,QACFiG,EAAyBqE,YAAkBvG,KAE3C2E,EAAa,uCAAG,sBAAA7J,EAAA,kEAEK0L,KAAKC,MAAMC,UAAUjD,GAF1B,gBAKhBY,EAAS5F,EAAgB,IAAK,wCALd,sCAOVyD,EAAuB/G,QAC1BwL,aAAa1K,EAASwH,EAAO6B,EAAS,IACtCT,KAAK,CAAEC,KAAM7I,IACb8I,GAAG,WAAW,WACbX,GAAa,MAEdW,GAAG,WAAW,WACbb,IACAD,OAEDc,GAAG,SAAS,WACXhD,QAAQC,MAAMA,GACdqC,EAAS,0BACTD,GAAa,MApBD,yDAwBlBrC,QAAQC,MAAM,0BAAd,MAxBkB,0DAAH,qDAiCnB,OACE,eAAC,IAAD,CAAOgD,MAAOvG,EAAgB,IAAK,gBAAiByF,UAAWA,EAA/D,UACE,eAAC,GAAD,WACGlC,GACC,cAAC,IAAD,CAAMnD,MAAM,UAAUE,GAAG,MAAzB,SACGiD,IAGL,eAAC,EAAD,WACE,eAAC,IAAD,WAAOvD,EAAgB,IAAK,gBAA5B,OACA,cAAC,GAAD,wBAAeuF,EAAIzC,KAAnB,cAEF,eAAC2E,GAAD,CAAOU,QAAQ,kBAAf,UAAkCnI,EAAgB,IAAK,qBAAvD,OACA,cAAC,IAAD,CACEG,GAAG,kBACH2C,KAAK,UACLsF,KAAK,OACLC,YAAarI,EAAgB,IAAK,iBAClCgF,MAAOA,EACPsC,SAxBa,SAACgB,GAA8C,IACnDC,EAAeD,EAAIrH,OAA1B+D,MACR6C,EAASU,IAuBHC,UAAWjF,EACXoD,SAAUjB,OAGd,eAAC,GAAD,WACE,cAAC,IAAD,CAAQc,WAAS,EAACC,QAAQ,YAAYC,QAASjB,EAA/C,SACGzF,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAQwG,WAAS,EAACE,QAASR,EAAeS,UAAWnJ,GAAWkI,IAAcV,EAA9E,SACGhF,EAAgB,IAAK,oB,2hBCjFhC,IAAMyI,GAASpJ,YAAOkB,EAAPlB,CAAH,MAINqJ,GAAgBrJ,YAAOsJ,KAAQC,MAAM,CAAEnC,QAAS,OAAQD,WAAW,GAAnDnH,CAAH,MAabwJ,GAAYxJ,IAAOC,IAAV,MAIT6F,GAAQ9F,YAAOO,IAAPP,CAAH,MAsIIyJ,GAlIyB,SAAC,GAAa,IAAXvD,EAAU,EAAVA,IAAU,EACzBtJ,mBAAS,CACjCyJ,WAAW,EACXqD,QAAQ,EACRC,WAAY,EACZC,eAAgB,IALiC,mBAC5C1G,EAD4C,KACrCC,EADqC,KAO7CxC,EAAkBC,cAP2B,EAiB/C9B,qBAAWqD,GARbM,EATiD,EASjDA,cACAC,EAViD,EAUjDA,SACAC,EAXiD,EAWjDA,WACA8C,EAZiD,EAYjDA,WACA1C,EAbiD,EAajDA,uBACAC,EAdiD,EAcjDA,yBACA4C,EAfiD,EAejDA,YACAC,EAhBiD,EAgBjDA,aAEIgE,EAAiBnH,IAAaC,EAC5BkC,EAA4DqB,EAA5DrB,QAASpB,EAAmDyC,EAAnDzC,KAAM/B,EAA6CwE,EAA7CxE,aAAcoI,EAA+B5D,EAA/B4D,cAAeC,EAAgB7D,EAAhB6D,YAC9CvC,EAAW5B,EAAYf,GACvBmF,EAAoBhH,EAA2BD,EAC/CkH,EAAgBzC,GAAYA,EAAS0C,OAAS,EAC9C5J,EAAO4C,EAAMwG,OAASS,IAAgBC,IAEtCC,EAAeC,sBAAW,sBAAC,kCAAAtN,EAAA,6DAC/BmG,GAAS,SAACY,GAAD,mBAAC,eAAoBA,GAArB,IAAgCsC,WAAW,OADrB,WAGTvE,IAAZzE,EAHqB,EAGrBA,QAHqB,SAIJA,EAAQsM,WAAW9E,GAASvH,OAJxB,cAIvBqM,EAJuB,gBAKAtM,EAAQuM,eAAe/E,GAASvH,OALhC,OAKvBsM,EALuB,OAO7BzG,GAAS,SAACY,GAAD,mBAAC,eACLA,GADI,IAEPsC,WAAW,EACXkE,eAAe,EACfZ,WAAY7E,SAAS6E,EAAY,IACjCC,eAAgB9E,SAAS8E,EAAgB,SAZd,kDAe7B3F,QAAQC,MAAR,MAf6B,0DAiB9B,CAACW,IAEE2F,EAAW,uCAAG,sBAAAxN,EAAA,0DACdkG,EAAMwG,OADQ,gBAEhBvG,GAAS,SAACY,GAAD,mBAAC,eAAoBA,GAArB,IAAgC2F,QAAS3F,EAAU2F,YAF5C,gDAKRW,IALQ,uDAOdpG,QAAQC,MAAR,MAPc,yBASdf,GAAS,SAACY,GAAD,mBAAC,eAAoBA,GAArB,IAAgC2F,QAAS3F,EAAU2F,YAT9C,4EAAH,qDAcXe,EAAgB,WACpBJ,IACAxE,KA5DiD,EA+DrB6E,YAAS,cAAC,GAAD,CAAexE,IAAKA,EAAKC,UAAWsE,KAApEE,EA/D4C,sBAgEtBD,YAAS,cAAC,GAAD,CAAcxE,IAAKA,EAAKsB,SAAUA,EAAUrB,UAAWsE,KAAtFG,EAhE4C,sBAiElBF,YAC/B,cAAC,GAAD,CAAkBxE,IAAKA,EAAKsB,SAAUA,EAAUrB,UAAWsE,KADtDI,EAjE4C,oBAqEnD,OACE,eAAC,IAAD,CAAMC,SAAUb,EAAhB,UACE,cAAC,EAAD,CAAO1I,IAAG,uBAAkBG,GAAgBF,IAAKiC,EAAMhC,aAAcwI,EAAgBH,EAAgB,OACrG,eAAC,IAAD,WACE,eAACV,GAAD,WACE,cAAC,IAAD,UAAU3F,IACThB,GAAiBoH,GAChB,cAAC,IAAD,CAAKkB,SAAO,EAAC3D,QAAQ,UAArB,SACGzG,EAAgB,IAAK,eAGzB8B,GAAiB+E,GAChB,cAAC,IAAD,CAAKuD,SAAO,EAAC3D,QAAQ,YAArB,SACGzG,EAAgB,IAAK,kBAI3B8B,GAAiBwH,GAChB,cAAC,IAAD,CAAQ9C,WAAS,EAACC,QAAQ,YAAY4D,GAAG,OAAO3D,QAASwD,EAAzD,SACGlK,EAAgB,IAAK,cAGzB8B,GAAiBoH,GAAkBG,GAClC,cAAC,IAAD,CAAQ7C,WAAS,EAACE,QAASsD,EAAqBK,GAAG,OAAnD,SACGrK,EAAgB,IAAK,oBAGzB8B,GAAiBgD,GAAcwE,GAC9B,cAAC,IAAD,CAAQ7C,QAAQ,SAASD,WAAS,EAACE,QAASuD,EAAoBI,GAAG,OAAnE,SACGrK,EAAgB,IAAK,0BAI5B,eAAC,IAAD,CAAYsK,EAAE,IAAd,UACE,cAAC5B,GAAD,CAAe6B,QAAS,cAAC5K,EAAD,CAAM6K,MAAM,OAAOpK,MAAM,YAAcsG,QAASmD,EAAxE,SACGtH,EAAMmD,UAAY1F,EAAgB,IAAK,cAAgBA,EAAgB,IAAK,aAE9EuC,EAAMwG,QACL,eAACF,GAAD,WACE,cAAC,IAAD,CAAM4B,GAAG,IAAIrK,MAAM,aAAaE,GAAG,OAAO2G,MAAO,CAAEyD,UAAW,UAA9D,SACGtB,IAEH,eAAC,EAAD,WACE,eAAC,IAAD,WAAOpJ,EAAgB,IAAK,sBAA5B,OACA,cAAC,GAAD,yBAEF,eAAC,EAAD,WACE,eAAC,IAAD,WAAOA,EAAgB,IAAK,iBAA5B,OACA,cAAC,GAAD,UAAQuC,EAAMyG,WAAazG,EAAM0G,oBAEnC,eAAC,EAAD,WACE,eAAC,IAAD,WAAOjJ,EAAgB,IAAK,iBAA5B,OACA,cAAC,GAAD,UAAQuC,EAAM0G,8B,qNC3K5B,IAae0B,GAbCtL,YAAOuL,IAAPvL,CAAH,MAOP,qBAAGE,MAAkBsL,aAAaC,MCQzBC,GAZC,WACd,OACE,cAAC,GAAD,UACGC,IAAQC,IAAM,aAAaC,KAAI,SAAC3F,GAAD,OAC9B,8BACE,cAAC,GAAD,CAASA,IAAKA,KADNA,EAAIzC,Y,oBCYPqI,GAhBU,SAACC,GAAqE,IAAzBC,EAAwB,uDAAP,GAC/EC,EAAU,GAQhB,OANAC,OAAOC,KAAKJ,GAASK,SAAQ,SAACC,GACxBN,EAAQM,GAAU,IAAML,EAAeM,SAASD,IAClDJ,EAAQhH,KAAR,UAAgB8G,EAAQM,IAAxB,OAAkCA,EAAOE,OAAO,EAAG,QAIhC,IAAnBN,EAAQ/B,OACH,KAGF+B,EAAQO,KAAK,M,0dCRtB,IAAMC,GAAWzM,YAAO0M,IAAP1M,CAAH,MAKR2M,GAAO3M,YAAO4M,IAAP5M,CAAH,MAIJ6M,GAAU7M,IAAOiL,EAAV,MACF,qBAAG/K,MAAkBC,OAAOC,cAMjC0M,GAAe9M,IAAOC,IAAV,MA4DH8M,GAxDK,WAAO,IAAD,EAQpBjO,qBAAWqD,GANbM,EAFsB,EAEtBA,cACAO,EAHsB,EAGtBA,yBACAD,EAJsB,EAItBA,uBACAH,EALsB,EAKtBA,kBACAC,EANsB,EAMtBA,iBACAC,EAPsB,EAOtBA,eAEInC,EAAkBC,cAClBwC,EAAevE,cACfmO,GAAoBlK,EAAiBM,GAAgBxE,KACrDW,EAAWuM,GAAiB1M,aAAe4N,GAAmB,CAAC,YAE/DC,EAAW7J,EAAeP,GAAqBO,EAAeP,IADhDC,EAAiBD,GACkE,IAAM,EAE7G,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAACiK,GAAD,UACE,cAAC,IAAD,CAAUI,YAAaD,MAEzB,cAACR,GAAD,UACc9L,EAAgB,IAA3BpB,EAA0B,UAASA,EAAT,0BAAkE,eAE/F,eAAC,EAAD,WACE,eAAC,IAAD,WAAOoB,EAAgB,IAAK,uBAA5B,OACA,cAAC,IAAD,UACE,iCAAU8B,EAAD,UAA4BO,EAA5B,YAAwDD,GAAvC,aAG9B,eAAC,EAAD,WACE,eAAC,IAAD,WAAOpC,EAAgB,IAAK,sBAA5B,OACA,cAAC,IAAD,UACE,iCAAU8B,EAAD,UAA4BG,EAA5B,YAAiDG,GAAhC,aAG9B,eAAC,EAAD,WACE,eAAC,IAAD,WAAOpC,EAAgB,IAAK,uBAA5B,OACA,gCACI8B,EAGA,eAACkK,GAAD,CAAMhL,KAAI,oCAA+BmB,GAAkBlB,OAAO,SAASC,IAAI,sBAA/E,0BACYiB,GACV,cAAC,IAAD,CAAa/B,MAAM,UAAUmH,GAAG,WAJlC,MAMC,UAGP,cAAC2E,GAAD,UAAUlM,EAAgB,IAAK,uECjDxBwM,GA1BW,WACxB,IAAMxM,EAAkBC,cADM,EAEiE9B,qBAC7FqD,GADMM,EAFsB,EAEtBA,cAAeO,EAFO,EAEPA,yBAA0BD,EAFnB,EAEmBA,uBAAwBH,EAF3C,EAE2CA,kBAIzE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,eAAC,EAAD,WACE,eAAC,IAAD,WAAOjC,EAAgB,IAAK,uBAA5B,OACA,cAAC,IAAD,UACE,iCAAU8B,EAAD,UAA4BO,EAA5B,YAAwDD,GAAvC,aAG9B,eAAC,EAAD,WACE,eAAC,IAAD,WAAOpC,EAAgB,IAAK,sBAA5B,OACA,cAAC,IAAD,UACE,iCAAU8B,EAAD,UAA4BG,EAA5B,YAAiDG,GAAhC,mB,kOCtBtC,IASeqK,GATOpN,IAAOC,IAAV,MAGG,qBAAGC,MAAkBC,OAAOkN,gB,uTCFlD,IAAM/L,GAAQtB,IAAOqB,IAAV,MAKLiM,GAAUtN,IAAOC,IAAV,MAIPsN,GAAoBvN,IAAOC,IAAV,MAcRuN,GATK,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQnL,EAAe,EAAfA,SAC7B,OACE,eAACiL,GAAD,WACE,cAAC,GAAD,CAAOhM,IAAKkM,EAAQjM,IAAI,cACxB,cAAC8L,GAAD,UAAUhL,QCGDoL,GAlBW,WACxB,IAAM/M,EAAkBC,cAExB,OACE,cAAC,GAAD,UACE,eAAC,GAAD,CAAa6M,OAAO,+BAApB,UACE,cAAC,IAAD,CAASxM,GAAG,MAAZ,SAAmBN,EAAgB,IAAK,sBACxC,cAAC,IAAD,UACGA,EACC,IACA,wGCIGgN,GAfI,WACjB,IAAMhN,EAAkBC,cAExB,OACE,cAAC,IAAD,CAAMkK,UAAQ,EAAd,SACE,cAAC,IAAD,UACE,eAAC,GAAD,CAAa2C,OAAO,sBAApB,UACE,cAAC,IAAD,CAASxM,GAAG,MAAZ,SAAmBN,EAAgB,IAAK,cACxC,cAAC,IAAD,UAAOA,EAAgB,IAAK,kDCOvBiN,GAfS,WACtB,IAAMjN,EAAkBC,cAExB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,GAAD,CAAa6M,OAAO,sBAApB,UACE,cAAC,IAAD,CAASxM,GAAG,MAAZ,SAAmBN,EAAgB,IAAK,mBACxC,cAAC,IAAD,UAAOA,EAAgB,IAAK,8ECqCvBkN,GAhCI,WAAO,IAChB1P,EAAYD,cAAZC,QADe,EAEoCW,qBAAWqD,GAA9DM,EAFe,EAEfA,cAAeC,EAFA,EAEAA,SAAUC,EAFV,EAEUA,WAAY7E,EAFtB,EAEsBA,UACvC6C,EAAkBC,cAExB,OAAKzC,EAYAsE,GAIAE,GAAcD,EACV,cAAC,GAAD,IAGL5E,EAAY,EACP,cAAC,GAAD,IAGF,cAAC,GAAD,IAXE,cAAC,IAAD,kBAXL,cAAC,IAAD,CAAMgN,UAAQ,EAAd,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAS7J,GAAG,MAAZ,SAAmBN,EAAgB,IAAK,yBACxC,cAAC,IAAD,CAAMM,GAAG,OAAT,SAAiBN,EAAgB,IAAK,4CACtC,cAACmN,GAAA,EAAD,U,gOCtBV,IAAMC,GAAgB/N,IAAOC,IAAV,MAMf,qBAAGC,MAAkBsL,aAAaC,MAoBvBuC,GAfC,WAGd,OAFuBlP,qBAAWqD,GAA1BsD,WAON,eAACsI,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,OANK,cAAC,GAAD,K,2JCZX,IAAME,GAAajO,IAAOC,IAAV,MACa,qBAAGC,MAAkBC,OAAOC,cA2B1C8N,UAtBH,WACV,IAAMvN,EAAkBC,cAExB,OACE,cAAC,EAAD,UACE,eAACuN,EAAA,EAAD,WACE,eAACF,GAAD,WACE,cAAC,IAAD,CAAS7C,GAAG,KAAKpK,KAAK,MAAMD,MAAM,YAAYE,GAAG,OAAjD,kBAGA,cAAC,IAAD,CAASmK,GAAG,KAAKpK,KAAK,KAAKD,MAAM,YAAjC,SACGJ,EAAgB,IAAK,wDAG1B,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,EAAD","file":"static/js/12.2f1acf3a.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = seconds\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","// @ts-nocheck\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Button, Heading, Text as UIKitText, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Container from 'components/layout/Container'\n\nconst StyledHowItWorks = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  padding: 24px 0;\n`\n\nconst Section = styled.div`\n  margin-bottom: 24px;\n`\n\nconst Icon = styled.div`\n  text-align: center;\n`\n\nconst Text = styled(UIKitText)`\n  flex: 1;\n  padding: 0 8px;\n`\n\nconst Row = styled.div`\n  align-items: start;\n  display: flex;\n  margin-bottom: 16px;\n`\n\nconst HowItWorks = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <StyledHowItWorks>\n        <Section>\n          <Heading id=\"how-it-works\" color=\"secondary\" size=\"lg\" mb=\"16px\">\n            {TranslateString(632, 'How it works')}\n          </Heading>\n          <Row>\n            <Icon>\n              <ArrowForwardIcon />\n            </Icon>\n            <Text>\n              {TranslateString(\n                634,\n                'Winners will be able to claim an NFT on this page once the claiming period starts.',\n              )}\n            </Text>\n          </Row>\n          <Row>\n            <Icon>\n              <ArrowForwardIcon />\n            </Icon>\n            <Text>\n              {TranslateString(636, 'If you’re not selected, you won’t be able to claim. Better luck next time!')}\n            </Text>\n          </Row>\n          <Row>\n            <Icon>\n              <ArrowForwardIcon />\n            </Icon>\n            <Text>\n              {TranslateString(\n                638,\n                \"Winners can trade in their NFTs for a CAKE value until the expiry date written below. If you don't trade in your NFT by then, don’t worry: you’ll still keep it in your wallet!\",\n              )}\n            </Text>\n          </Row>\n        </Section>\n        <Section>\n          <Heading color=\"secondary\" size=\"lg\" mb=\"16px\">\n            {TranslateString(640, 'How are winners selected?')}\n          </Heading>\n          <Row>\n            <Icon>\n              <ArrowForwardIcon />\n            </Icon>\n            <Text>{TranslateString(642, 'Winners are selected at random! Good luck!')}</Text>\n          </Row>\n        </Section>\n        {/* <div>\n          <Button\n            as=\"a\"\n            href=\"https://docs.google.com/forms/d/e/1FAIpQLSfToBNlovtMvTZFSwOhk0TBiDPMGasLxqG0RB-kJN85HR_avA/viewform\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {TranslateString(644, 'Register for a chance to win')}\n          </Button>\n        </div> */}\n      </StyledHowItWorks>\n    </Container>\n  )\n}\n\nexport default HowItWorks\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport { RABBIT_MINTING_FARM_ADDRESS, PANCAKE_RABBITS_ADDRESS } from 'config/constants/nfts'\n\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getRabbitMintingContract = (contractOptions?: ContractOptions) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return getContract(rabbitMintingFarmAbi, RABBIT_MINTING_FARM_ADDRESS, contractOptions)\n}\n\nexport const getPancakeRabbitContract = (contractOptions?: ContractOptions) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return getContract(pancakeRabbitsAbi, PANCAKE_RABBITS_ADDRESS, contractOptions)\n}\n\nexport default getRabbitMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\nimport { getPancakeRabbitContract } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  canClaim: boolean\n  hasClaimed: boolean\n  countBunniesBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  bunnyMap: BunnyMap\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (bunnyId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    canClaim: false,\n    hasClaimed: false,\n    countBunniesBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    bunnyMap: {},\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBunniesBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n        ] = await multicall(rabbitmintingfarm, [\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'startBlockNumber' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'endBlockNumber' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'countBunniesBurnt' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBunniesBurnt]: [BigNumber] = countBunniesBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBunniesBurnt: countBunniesBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const pancakeRabbitsContract = getPancakeRabbitContract()\n        const [canClaimArr, hasClaimedArr] = await multicall(rabbitmintingfarm, [\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\n        ])\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call()\n        const [canClaim]: [boolean] = canClaimArr\n        const [hasClaimed]: [boolean] = hasClaimedArr\n\n        let bunnyMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the bunnyId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await pancakeRabbitsContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const bunnyId = await pancakeRabbitsContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(bunnyId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same bunny so the format is:\n          // { [bunnyId]: [array of tokenIds] }\n          bunnyMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [bunnyId, tokenId] = association\n\n            return {\n              ...accum,\n              [bunnyId]: accum[bunnyId] ? [...accum[bunnyId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          canClaim,\n          hasClaimed,\n          balanceOf,\n          bunnyMap,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (bunnyId: number) => state.bunnyMap[bunnyId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const rabbitMintingContract = useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS)\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  const handleConfirm = async () => {\n    try {\n      await rabbitMintingContract.methods\n        .mintNFT(nft.bunnyId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError('You must have a CAKE balance greater than zero to claim NFT')\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={TranslateString(999, 'Claim NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || cakeInWallet <= 0}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const rabbitMintingContract = useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await rabbitMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>10 CAKE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive CAKE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { PANCAKE_RABBITS_ADDRESS } from 'config/constants/nfts'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const pancakeRabbitsContract = usePancakeRabbits(PANCAKE_RABBITS_ADDRESS)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await pancakeRabbitsContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getPancakeRabbitContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: false,\n    bunnyCount: 0,\n    bunnyBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    canClaim,\n    hasClaimed,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n  } = useContext(NftProviderContext)\n  const walletCanClaim = canClaim && !hasClaimed\n  const { bunnyId, name, previewImage, originalImage, description } = nft\n  const tokenIds = getTokenIds(bunnyId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getPancakeRabbitContract()\n      const bunnyCount = await methods.bunnyCount(bunnyId).call()\n      const bunnyBurnCount = await methods.bunnyBurnCount(bunnyId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        bunnyCount: parseInt(bunnyCount, 10),\n        bunnyBurnCount: parseInt(bunnyBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [bunnyId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && walletCanClaim && (\n            <Tag outline variant=\"success\">\n              {TranslateString(526, 'Available')}\n            </Tag>\n          )}\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n        {isInitialized && walletCanClaim && isSupplyAvailable && (\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\n            {TranslateString(999, 'Claim this NFT')}\n          </Button>\n        )}\n        {isInitialized && canBurnNft && walletOwnsNft && (\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\n            {TranslateString(999, 'Trade in for CAKE')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\n        </DetailsButton>\n        {state.isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Value if traded in')}:</Text>\n              <Value>10 CAKE</Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\n              <Value>{state.bunnyCount + state.bunnyBurnCount}</Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number burned')}:</Text>\n              <Value>{state.bunnyBurnCount}</Value>\n            </InfoRow>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\n\nconst NftGrid = styled(BaseLayout)`\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  & > div {\n    grid-column: 2 / 6;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n      grid-column: span 4;\n    }\n  }\n`\n\nexport default NftGrid\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/nfts'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\n\nconst NftList = () => {\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => (\n        <div key={nft.name}>\n          <NftCard nft={nft} />\n        </div>\n      ))}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import getTimePeriods from './getTimePeriods'\n\n/**\n * @param {Object} periods Return value from getTimePeriods\n * @return {string} '14h 3m 4s'\n */\nconst formatTimePeriod = (periods: ReturnType<typeof getTimePeriods>, excludePeriods = []) => {\n  const textArr = []\n\n  Object.keys(periods).forEach((period) => {\n    if (periods[period] > 0 && !excludePeriods.includes(period)) {\n      textArr.push(`${periods[period]}${period.substr(0, 1)}`)\n    }\n  })\n\n  if (textArr.length === 0) {\n    return null\n  }\n\n  return textArr.join(' ')\n}\n\nexport default formatTimePeriod\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, OpenNewIcon, Text, Link as UIKitLink, Progress } from '@pancakeswap-libs/uikit'\nimport { BSC_BLOCK_TIME } from 'config'\nimport useI18n from 'hooks/useI18n'\nimport useBlock from 'hooks/useBlock'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport formatTimePeriod from 'utils/formatTimePeriod'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst TimeLeft = styled(Heading)`\n  margin-bottom: 16px;\n  text-align: center;\n`\n\nconst Link = styled(UIKitLink)`\n  text-decoration: underline;\n`\n\nconst Message = styled.p`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n  padding-top: 16px;\n  text-align: center;\n`\n\nconst ProgressWrap = styled.div`\n  margin-bottom: 16px;\n`\n\nconst NftProgress = () => {\n  const {\n    isInitialized,\n    currentDistributedSupply,\n    totalSupplyDistributed,\n    countBunniesBurnt,\n    startBlockNumber,\n    endBlockNumber,\n  } = useContext(NftProviderContext)\n  const TranslateString = useI18n()\n  const currentBlock = useBlock()\n  const secondsRemaining = (endBlockNumber - currentBlock) * BSC_BLOCK_TIME\n  const timeLeft = formatTimePeriod(getTimePeriods(secondsRemaining), ['seconds'])\n  const totalBlocks = endBlockNumber - startBlockNumber\n  const progress = currentBlock > startBlockNumber ? ((currentBlock - startBlockNumber) / totalBlocks) * 100 : 5\n\n  return (\n    <Card>\n      <CardBody>\n        <ProgressWrap>\n          <Progress primaryStep={progress} />\n        </ProgressWrap>\n        <TimeLeft>\n          {timeLeft ? TranslateString(999, `${timeLeft} left to trade in NFTs`) : TranslateString(999, 'Finished!')}\n        </TimeLeft>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's claimed\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's burned\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${countBunniesBurnt}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'Can be traded until')}:</Text>\n          <div>\n            {!isInitialized ? (\n              '...'\n            ) : (\n              <Link href={`https://bscscan.com/block/${endBlockNumber}`} target=\"_blank\" rel=\"noreferrer noopener\">\n                {`Block ${endBlockNumber}`}\n                <OpenNewIcon color=\"primary\" ml=\"2px\" />\n              </Link>\n            )}{' '}\n          </div>\n        </InfoRow>\n        <Message>{TranslateString(999, 'NFTs can be traded in for CAKE until the above block height')}</Message>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgress\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBunniesBurnt } = useContext(\n    NftProviderContext,\n  )\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's claimed\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's burned\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${countBunniesBurnt}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import styled from 'styled-components'\n\nconst SecondaryCard = styled.div`\n  align-items: start;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 32px;\n  display: flex;\n  padding: 24px;\n`\n\nexport default SecondaryCard\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Image = styled.img`\n  margin-right: 16px;\n  width: 56px;\n`\n\nconst Content = styled.div`\n  flex: 1;\n`\n\nconst StyledCardContent = styled.div`\n  align-items: start;\n  display: flex;\n`\n\nconst CardContent = ({ imgSrc, children }) => {\n  return (\n    <StyledCardContent>\n      <Image src={imgSrc} alt=\"card icon\" />\n      <Content>{children}</Content>\n    </StyledCardContent>\n  )\n}\n\nexport default CardContent\n","import React from 'react'\nimport { Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport SecondaryCard from './SecondaryCard'\nimport CardContent from './CardContent'\n\nconst NoNftsToClaimCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <SecondaryCard>\n      <CardContent imgSrc=\"/images/present-disabled.svg\">\n        <Heading mb=\"8px\">{TranslateString(999, 'No NFTs to claim')}</Heading>\n        <Text>\n          {TranslateString(\n            999,\n            'You have no NFTs to claim at this time, but you can still see the NFTs in this series below.',\n          )}\n        </Text>\n      </CardContent>\n    </SecondaryCard>\n  )\n}\n\nexport default NoNftsToClaimCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport CardContent from './CardContent'\n\nconst YouWonCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card isActive>\n      <CardBody>\n        <CardContent imgSrc=\"/images/present.svg\">\n          <Heading mb=\"8px\">{TranslateString(999, 'You won!')}</Heading>\n          <Text>{TranslateString(999, 'Claim an NFT from the options below!')}</Text>\n        </CardContent>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default YouWonCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport CardContent from './CardContent'\n\nconst NftInWalletCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card>\n      <CardBody>\n        <CardContent imgSrc=\"/images/present.svg\">\n          <Heading mb=\"8px\">{TranslateString(999, 'NFT in wallet')}</Heading>\n          <Text>{TranslateString(999, 'Trade in your NFT for CAKE, or just keep it for your collection.')}</Text>\n        </CardContent>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftInWalletCard\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NoNftsToClaimCard from './NoNftsToClaimCard'\nimport YouWonCard from './YouWonCard'\nimport NftInWalletCard from './NftInWalletCard'\n\n/**\n * Possible states\n *\n * 1. Disconnected wallet\n * 2. No NFT's to claim\n * 3. You won an NFT\n * 4. NFT in wallet\n */\nconst StatusCard = () => {\n  const { account } = useWallet()\n  const { isInitialized, canClaim, hasClaimed, balanceOf } = useContext(NftProviderContext)\n  const TranslateString = useI18n()\n\n  if (!account) {\n    return (\n      <Card isActive>\n        <CardBody>\n          <Heading mb=\"8px\">{TranslateString(999, 'Wallet Disconnected')}</Heading>\n          <Text mb=\"16px\">{TranslateString(999, 'Connect to see if you have won an NFT!')}</Text>\n          <UnlockButton />\n        </CardBody>\n      </Card>\n    )\n  }\n\n  if (!isInitialized) {\n    return <Text>...</Text>\n  }\n\n  if (!hasClaimed && canClaim) {\n    return <YouWonCard />\n  }\n\n  if (balanceOf > 0) {\n    return <NftInWalletCard />\n  }\n\n  return <NoNftsToClaimCard />\n}\n\nexport default StatusCard\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  if (!canBurnNft) {\n    return <NftProgressSimple />\n  }\n\n  return (\n    <StyledNtfInfo>\n      <NftProgress />\n      <StatusCard />\n    </StyledNtfInfo>\n  )\n}\n\nexport default NftInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <NftProvider>\n      <Page>\n        <StyledHero>\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\n            NFTs\n          </Heading>\n          <Heading as=\"h2\" size=\"lg\" color=\"secondary\">\n            {TranslateString(999, 'Trade in for Rock, or keep for your collection!')}\n          </Heading>\n        </StyledHero>\n        <NftInfo />\n        <NftList />\n        <HowItWorks />\n      </Page>\n    </NftProvider>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}