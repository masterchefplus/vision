{"version":3,"sources":["utils/callHelpers.ts","config/index.ts","components/Input/Input.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","hooks/useHarvest.ts","hooks/useApprove.ts","components/TokenInput/TokenInput.tsx","components/Tags.tsx","hooks/useStake.ts","components/layout/Flex.tsx","hooks/useUnstake.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/Farms.tsx"],"names":["approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","BigNumber","times","pow","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","BSC_BLOCK_TIME","StyledInputWrapper","styled","div","props","theme","card","background","colors","borderColor","spacing","StyledInput","input","primary","Input","endAdornment","onChange","placeholder","startAdornment","StyledSpacer","size","Spacer","s","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","useHarvest","farmPid","dispatch","useDispatch","useWallet","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useSousHarvest","sousId","isUsingBnb","useSousChef","handleHarvest","updateUserPendingReward","updateUserBalance","useApprove","onApprove","useSousApprove","updateUserAllowance","useIfoApprove","tokenContract","spenderAddress","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","TranslateString","useI18n","toLocaleString","onClick","NoFeeTag","variant","outline","startIcon","CoreTag","CommunityTag","BinanceTag","useSousStake","handleStake","updateUserStakedBalance","onStake","useStake","console","info","FlexLayout","SYRUPIDS","useSousUnstake","isOldSyrup","includes","onUnstake","useUnstake","Wrapper","ExpandableSectionButton","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","lpLabel","totalValueFormated","liquidityUrlPathParts","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","rawEarningsBalance","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","getContract","handleApprove","error","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","Divider","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","ROCK","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","rockPerBlock","poolWeight","comparedTo","Page","textAlign","exact"],"mappings":"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","file":"static/js/9.7d733dc3.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 2px;\n  border: 3px solid ${(props) => props.theme.colors.borderColor};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {depositFeeBP > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\n          {symbol}\n        </StyledMaxText>\n      ) : null}\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal\n          href={\n            isTokenOnly\n              ? `https://exchange.masterchef.vision/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://exchange.masterchef.vision/#/add/${liquidityUrlPathParts}`\n          }\n        >\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n\t\t{/* <Text>{TranslateString(23, 'Total Liquidity')}:</Text> */}\n\t\t\t  {/* <Text>{totalValueFormated}</Text> */}\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"primary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0 }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP }) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 12 ? (\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size=\"sm\"\n            variant=\"secondary\"\n            marginBottom=\"15px\"\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n        ) : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress)\n    }\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n      />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"primary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          ROCK\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"primary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            ROCK per $1000\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 2px;\n  border: 3px solid ${(props) => props.theme.colors.borderColor};\n  box-shadow: 'none';\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly\n    ? farm.tokenSymbol.toLowerCase()\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.ROCK) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'ROCK'\n  const farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'ROCK' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold>\n          {farm.depositFeeBP / 100}%\n        </Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading, Text } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { tokenMode } = farmsProps\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.rockPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice)\n        }\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          marginBottom: '20px',\n        }}\n      >\n        <img src={`/images/rockswap/${tokenMode ? 'mining' : 'wheelbarrow'}.svg`} alt=\"logo\" width=\"100px\" />\n      </div>\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" style={{ textAlign: 'center' }}>\n        {tokenMode ? 'Stake tokens to earn ROCK' : 'Stake LP tokens to earn ROCK'}\n      </Heading>\n      <Text mb=\"50px\" style={{ textAlign: 'center' }}>\n        Deposit Fee will be used to buyback ROCK.\n      </Text>\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      {/*\n        <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive />\n      */}\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}