{"version":3,"sources":["utils/callHelpers.ts","hooks/useTokenBalance.ts","hooks/useHarvest.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","BigNumber","times","pow","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","cakeContract","getContract","cakeABI","getCakeAddress","call","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","ethereum","fastRefresh","getTokenBalance","res","useHarvest","farmPid","dispatch","useDispatch","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","multicall","masterChefABI","rawResults","results","index","fetchBalances","CardValue","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","rockPrice","usePriceCakeBusd","toNumber","earning","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","size","mb","src","alt","width","height","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","burnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","rockPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","chrome","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/13.a2f6e4c4.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingRock',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({ earningsSum }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingRock',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  // background-image: url('/images/egg/2a.png');\n  // background-repeat: no-repeat;\n  // background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const rockPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          Farms & Mining\n        </Heading>\n        <CardImage src=\"/images/rockswap/rock.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>ROCK to Harvest</Label>\n          <CakeHarvestBalance earningsSum={earningsSum} />\n          <Label>~${(rockPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>ROCK in Wallet</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(rockPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx ? 'Collecting ROCK' : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const rockPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = rockPrice.times(circSupply)\n\n  let rockPerBlock = 0\n  if (farms && farms[0] && farms[0].rockPerBlock) {\n    rockPerBlock = new BigNumber(farms[0].rockPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          ROCK Stats\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">New ROCK/block</Text>\n          <Text bold fontSize=\"14px\">\n            {rockPerBlock}\n          </Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue()\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'rockswap_bsc',\n          }}\n          options={{\n            height: '300',\n            chrome: 'noheader, nofooter',\n            width: '400',\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/rockswap/rock.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/rockswap/rock.svg'), url('/images/rockswap/wheelbarrow.svg');\n    background-position: left center, right center;\n    height: 100px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"primary\">\n          FlintStone Finance\n        </Heading>\n        <Text>The most robust yield-farm on Binance Smart Chain.</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard />\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}